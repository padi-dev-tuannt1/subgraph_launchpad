// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class IDOFactory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save IDOFactory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type IDOFactory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("IDOFactory", id.toString(), this);
    }
  }

  static loadInBlock(id: string): IDOFactory | null {
    return changetype<IDOFactory | null>(store.get_in_block("IDOFactory", id));
  }

  static load(id: string): IDOFactory | null {
    return changetype<IDOFactory | null>(store.get("IDOFactory", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get feeToken(): Bytes {
    let value = this.get("feeToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set feeToken(value: Bytes) {
    this.set("feeToken", Value.fromBytes(value));
  }

  get feeWallet(): Bytes {
    let value = this.get("feeWallet");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set feeWallet(value: Bytes) {
    this.set("feeWallet", Value.fromBytes(value));
  }

  get feeAmount(): BigInt {
    let value = this.get("feeAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set feeAmount(value: BigInt) {
    this.set("feeAmount", Value.fromBigInt(value));
  }

  get burnPercent(): BigInt {
    let value = this.get("burnPercent");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set burnPercent(value: BigInt) {
    this.set("burnPercent", Value.fromBigInt(value));
  }

  get idos(): IDOCreatedLoader {
    return new IDOCreatedLoader(
      "IDOFactory",
      this.get("id")!.toString(),
      "idos"
    );
  }
}

export class IDOCreated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save IDOCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type IDOCreated must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("IDOCreated", id.toString(), this);
    }
  }

  static loadInBlock(id: string): IDOCreated | null {
    return changetype<IDOCreated | null>(store.get_in_block("IDOCreated", id));
  }

  static load(id: string): IDOCreated | null {
    return changetype<IDOCreated | null>(store.get("IDOCreated", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get idoPool(): Bytes {
    let value = this.get("idoPool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set idoPool(value: Bytes) {
    this.set("idoPool", Value.fromBytes(value));
  }

  get rewardToken(): Bytes {
    let value = this.get("rewardToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set rewardToken(value: Bytes) {
    this.set("rewardToken", Value.fromBytes(value));
  }

  get tokenURI(): string {
    let value = this.get("tokenURI");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set tokenURI(value: string) {
    this.set("tokenURI", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get IDOFactory(): string {
    let value = this.get("IDOFactory");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set IDOFactory(value: string) {
    this.set("IDOFactory", Value.fromString(value));
  }
}

export class IDOPool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save IDOPool entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type IDOPool must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("IDOPool", id.toString(), this);
    }
  }

  static loadInBlock(id: string): IDOPool | null {
    return changetype<IDOPool | null>(store.get_in_block("IDOPool", id));
  }

  static load(id: string): IDOPool | null {
    return changetype<IDOPool | null>(store.get("IDOPool", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rewardToken(): Bytes {
    let value = this.get("rewardToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set rewardToken(value: Bytes) {
    this.set("rewardToken", Value.fromBytes(value));
  }

  get metadataURL(): string | null {
    let value = this.get("metadataURL");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metadataURL(value: string | null) {
    if (!value) {
      this.unset("metadataURL");
    } else {
      this.set("metadataURL", Value.fromString(<string>value));
    }
  }

  get finInfo(): string {
    let value = this.get("finInfo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set finInfo(value: string) {
    this.set("finInfo", Value.fromString(value));
  }

  get timestamps(): string {
    let value = this.get("timestamps");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set timestamps(value: string) {
    this.set("timestamps", Value.fromString(value));
  }

  get dexInfo(): string {
    let value = this.get("dexInfo");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set dexInfo(value: string) {
    this.set("dexInfo", Value.fromString(value));
  }

  get lockerFactory(): Bytes {
    let value = this.get("lockerFactory");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set lockerFactory(value: Bytes) {
    this.set("lockerFactory", Value.fromBytes(value));
  }

  get totalInvestedETH(): BigInt {
    let value = this.get("totalInvestedETH");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvestedETH(value: BigInt) {
    this.set("totalInvestedETH", Value.fromBigInt(value));
  }

  get tokensForDistribution(): BigInt {
    let value = this.get("tokensForDistribution");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokensForDistribution(value: BigInt) {
    this.set("tokensForDistribution", Value.fromBigInt(value));
  }

  get distributedTokens(): BigInt {
    let value = this.get("distributedTokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set distributedTokens(value: BigInt) {
    this.set("distributedTokens", Value.fromBigInt(value));
  }

  get distributed(): boolean {
    let value = this.get("distributed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set distributed(value: boolean) {
    this.set("distributed", Value.fromBoolean(value));
  }

  get userInfos(): UserInfoLoader {
    return new UserInfoLoader(
      "IDOPool",
      this.get("id")!.toString(),
      "userInfos"
    );
  }
}

export class FinInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FinInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FinInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FinInfo", id.toString(), this);
    }
  }

  static loadInBlock(id: string): FinInfo | null {
    return changetype<FinInfo | null>(store.get_in_block("FinInfo", id));
  }

  static load(id: string): FinInfo | null {
    return changetype<FinInfo | null>(store.get("FinInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenPrice(): BigInt {
    let value = this.get("tokenPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenPrice(value: BigInt) {
    this.set("tokenPrice", Value.fromBigInt(value));
  }

  get softCap(): BigInt {
    let value = this.get("softCap");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set softCap(value: BigInt) {
    this.set("softCap", Value.fromBigInt(value));
  }

  get hardCap(): BigInt {
    let value = this.get("hardCap");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set hardCap(value: BigInt) {
    this.set("hardCap", Value.fromBigInt(value));
  }

  get minEthPayment(): BigInt {
    let value = this.get("minEthPayment");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set minEthPayment(value: BigInt) {
    this.set("minEthPayment", Value.fromBigInt(value));
  }

  get maxEthPayment(): BigInt {
    let value = this.get("maxEthPayment");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set maxEthPayment(value: BigInt) {
    this.set("maxEthPayment", Value.fromBigInt(value));
  }

  get listingPrice(): BigInt {
    let value = this.get("listingPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set listingPrice(value: BigInt) {
    this.set("listingPrice", Value.fromBigInt(value));
  }

  get lpInterestRate(): BigInt {
    let value = this.get("lpInterestRate");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lpInterestRate(value: BigInt) {
    this.set("lpInterestRate", Value.fromBigInt(value));
  }

  get IDOPool(): string {
    let value = this.get("IDOPool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set IDOPool(value: string) {
    this.set("IDOPool", Value.fromString(value));
  }
}

export class Timestamps extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Timestamps entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Timestamps must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Timestamps", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Timestamps | null {
    return changetype<Timestamps | null>(store.get_in_block("Timestamps", id));
  }

  static load(id: string): Timestamps | null {
    return changetype<Timestamps | null>(store.get("Timestamps", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get startTimestamp(): BigInt {
    let value = this.get("startTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startTimestamp(value: BigInt) {
    this.set("startTimestamp", Value.fromBigInt(value));
  }

  get endTimestamp(): BigInt {
    let value = this.get("endTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set endTimestamp(value: BigInt) {
    this.set("endTimestamp", Value.fromBigInt(value));
  }

  get unlockTimestamp(): BigInt {
    let value = this.get("unlockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set unlockTimestamp(value: BigInt) {
    this.set("unlockTimestamp", Value.fromBigInt(value));
  }

  get IDOPool(): string {
    let value = this.get("IDOPool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set IDOPool(value: string) {
    this.set("IDOPool", Value.fromString(value));
  }
}

export class DEXInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DEXInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DEXInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DEXInfo", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DEXInfo | null {
    return changetype<DEXInfo | null>(store.get_in_block("DEXInfo", id));
  }

  static load(id: string): DEXInfo | null {
    return changetype<DEXInfo | null>(store.get("DEXInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get router(): Bytes {
    let value = this.get("router");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set router(value: Bytes) {
    this.set("router", Value.fromBytes(value));
  }

  get factory(): Bytes {
    let value = this.get("factory");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set factory(value: Bytes) {
    this.set("factory", Value.fromBytes(value));
  }

  get weth(): Bytes {
    let value = this.get("weth");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set weth(value: Bytes) {
    this.set("weth", Value.fromBytes(value));
  }

  get IDOPool(): string {
    let value = this.get("IDOPool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set IDOPool(value: string) {
    this.set("IDOPool", Value.fromString(value));
  }
}

export class UserInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserInfo must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserInfo", id.toString(), this);
    }
  }

  static loadInBlock(id: string): UserInfo | null {
    return changetype<UserInfo | null>(store.get_in_block("UserInfo", id));
  }

  static load(id: string): UserInfo | null {
    return changetype<UserInfo | null>(store.get("UserInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get debt(): BigInt {
    let value = this.get("debt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set debt(value: BigInt) {
    this.set("debt", Value.fromBigInt(value));
  }

  get total(): BigInt {
    let value = this.get("total");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set total(value: BigInt) {
    this.set("total", Value.fromBigInt(value));
  }

  get totalInvestedETH(): BigInt {
    let value = this.get("totalInvestedETH");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalInvestedETH(value: BigInt) {
    this.set("totalInvestedETH", Value.fromBigInt(value));
  }

  get IDOPool(): string {
    let value = this.get("IDOPool");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set IDOPool(value: string) {
    this.set("IDOPool", Value.fromString(value));
  }
}

export class IDOCreatedLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): IDOCreated[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<IDOCreated[]>(value);
  }
}

export class UserInfoLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UserInfo[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UserInfo[]>(value);
  }
}
