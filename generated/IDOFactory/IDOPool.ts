// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RefundToken extends ethereum.Event {
  get params(): RefundToken__Params {
    return new RefundToken__Params(this);
  }
}

export class RefundToken__Params {
  _event: RefundToken;

  constructor(event: RefundToken) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RefundUser extends ethereum.Event {
  get params(): RefundUser__Params {
    return new RefundUser__Params(this);
  }
}

export class RefundUser__Params {
  _event: RefundUser;

  constructor(event: RefundUser) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TokensDebt extends ethereum.Event {
  get params(): TokensDebt__Params {
    return new TokensDebt__Params(this);
  }
}

export class TokensDebt__Params {
  _event: TokensDebt;

  constructor(event: TokensDebt) {
    this._event = event;
  }

  get holder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ethAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokensWithdrawn extends ethereum.Event {
  get params(): TokensWithdrawn__Params {
    return new TokensWithdrawn__Params(this);
  }
}

export class TokensWithdrawn__Params {
  _event: TokensWithdrawn;

  constructor(event: TokensWithdrawn) {
    this._event = event;
  }

  get holder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithdrawETH extends ethereum.Event {
  get params(): WithdrawETH__Params {
    return new WithdrawETH__Params(this);
  }
}

export class WithdrawETH__Params {
  _event: WithdrawETH;

  constructor(event: WithdrawETH) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get distributed(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class WithdrawNotSoldToken extends ethereum.Event {
  get params(): WithdrawNotSoldToken__Params {
    return new WithdrawNotSoldToken__Params(this);
  }
}

export class WithdrawNotSoldToken__Params {
  _event: WithdrawNotSoldToken;

  constructor(event: WithdrawNotSoldToken) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class IDOPool__dexInfoResult {
  value0: Address;
  value1: Address;
  value2: Address;

  constructor(value0: Address, value1: Address, value2: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    return map;
  }

  getRouter(): Address {
    return this.value0;
  }

  getFactory(): Address {
    return this.value1;
  }

  getWeth(): Address {
    return this.value2;
  }
}

export class IDOPool__finInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }

  getTokenPrice(): BigInt {
    return this.value0;
  }

  getSoftCap(): BigInt {
    return this.value1;
  }

  getHardCap(): BigInt {
    return this.value2;
  }

  getMinEthPayment(): BigInt {
    return this.value3;
  }

  getMaxEthPayment(): BigInt {
    return this.value4;
  }

  getListingPrice(): BigInt {
    return this.value5;
  }

  getLpInterestRate(): BigInt {
    return this.value6;
  }
}

export class IDOPool__timestampsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getStartTimestamp(): BigInt {
    return this.value0;
  }

  getEndTimestamp(): BigInt {
    return this.value1;
  }

  getUnlockTimestamp(): BigInt {
    return this.value2;
  }
}

export class IDOPool__userInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getDebt(): BigInt {
    return this.value0;
  }

  getTotal(): BigInt {
    return this.value1;
  }

  getTotalInvestedETH(): BigInt {
    return this.value2;
  }
}

export class IDOPool extends ethereum.SmartContract {
  static bind(address: Address): IDOPool {
    return new IDOPool("IDOPool", address);
  }

  decimals(): BigInt {
    let result = super.call("decimals", "decimals():(uint256)", []);

    return result[0].toBigInt();
  }

  try_decimals(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("decimals", "decimals():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  dexInfo(): IDOPool__dexInfoResult {
    let result = super.call(
      "dexInfo",
      "dexInfo():(address,address,address)",
      []
    );

    return new IDOPool__dexInfoResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress()
    );
  }

  try_dexInfo(): ethereum.CallResult<IDOPool__dexInfoResult> {
    let result = super.tryCall(
      "dexInfo",
      "dexInfo():(address,address,address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IDOPool__dexInfoResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress()
      )
    );
  }

  distributed(): boolean {
    let result = super.call("distributed", "distributed():(bool)", []);

    return result[0].toBoolean();
  }

  try_distributed(): ethereum.CallResult<boolean> {
    let result = super.tryCall("distributed", "distributed():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  distributedTokens(): BigInt {
    let result = super.call(
      "distributedTokens",
      "distributedTokens():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_distributedTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "distributedTokens",
      "distributedTokens():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  finInfo(): IDOPool__finInfoResult {
    let result = super.call(
      "finInfo",
      "finInfo():(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      []
    );

    return new IDOPool__finInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_finInfo(): ethereum.CallResult<IDOPool__finInfoResult> {
    let result = super.tryCall(
      "finInfo",
      "finInfo():(uint256,uint256,uint256,uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IDOPool__finInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  getNotSoldToken(): BigInt {
    let result = super.call(
      "getNotSoldToken",
      "getNotSoldToken():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getNotSoldToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNotSoldToken",
      "getNotSoldToken():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lockerFactory(): Address {
    let result = super.call("lockerFactory", "lockerFactory():(address)", []);

    return result[0].toAddress();
  }

  try_lockerFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "lockerFactory",
      "lockerFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  metadataURL(): string {
    let result = super.call("metadataURL", "metadataURL():(string)", []);

    return result[0].toString();
  }

  try_metadataURL(): ethereum.CallResult<string> {
    let result = super.tryCall("metadataURL", "metadataURL():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardToken(): Address {
    let result = super.call("rewardToken", "rewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_rewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardToken", "rewardToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  timestamps(): IDOPool__timestampsResult {
    let result = super.call(
      "timestamps",
      "timestamps():(uint256,uint256,uint256)",
      []
    );

    return new IDOPool__timestampsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_timestamps(): ethereum.CallResult<IDOPool__timestampsResult> {
    let result = super.tryCall(
      "timestamps",
      "timestamps():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IDOPool__timestampsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  tokensForDistribution(): BigInt {
    let result = super.call(
      "tokensForDistribution",
      "tokensForDistribution():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_tokensForDistribution(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokensForDistribution",
      "tokensForDistribution():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalInvestedETH(): BigInt {
    let result = super.call(
      "totalInvestedETH",
      "totalInvestedETH():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalInvestedETH(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalInvestedETH",
      "totalInvestedETH():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userInfo(param0: Address): IDOPool__userInfoResult {
    let result = super.call(
      "userInfo",
      "userInfo(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new IDOPool__userInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_userInfo(param0: Address): ethereum.CallResult<IDOPool__userInfoResult> {
    let result = super.tryCall(
      "userInfo",
      "userInfo(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IDOPool__userInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _rewardToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _finInfo(): ConstructorCall_finInfoStruct {
    return changetype<ConstructorCall_finInfoStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }

  get _timestamps(): ConstructorCall_timestampsStruct {
    return changetype<ConstructorCall_timestampsStruct>(
      this._call.inputValues[2].value.toTuple()
    );
  }

  get _dexInfo(): ConstructorCall_dexInfoStruct {
    return changetype<ConstructorCall_dexInfoStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }

  get _lockerFactoryAddress(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _metadataURL(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall_finInfoStruct extends ethereum.Tuple {
  get tokenPrice(): BigInt {
    return this[0].toBigInt();
  }

  get softCap(): BigInt {
    return this[1].toBigInt();
  }

  get hardCap(): BigInt {
    return this[2].toBigInt();
  }

  get minEthPayment(): BigInt {
    return this[3].toBigInt();
  }

  get maxEthPayment(): BigInt {
    return this[4].toBigInt();
  }

  get listingPrice(): BigInt {
    return this[5].toBigInt();
  }

  get lpInterestRate(): BigInt {
    return this[6].toBigInt();
  }
}

export class ConstructorCall_timestampsStruct extends ethereum.Tuple {
  get startTimestamp(): BigInt {
    return this[0].toBigInt();
  }

  get endTimestamp(): BigInt {
    return this[1].toBigInt();
  }

  get unlockTimestamp(): BigInt {
    return this[2].toBigInt();
  }
}

export class ConstructorCall_dexInfoStruct extends ethereum.Tuple {
  get router(): Address {
    return this[0].toAddress();
  }

  get factory(): Address {
    return this[1].toAddress();
  }

  get weth(): Address {
    return this[2].toAddress();
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class ClaimForCall extends ethereum.Call {
  get inputs(): ClaimForCall__Inputs {
    return new ClaimForCall__Inputs(this);
  }

  get outputs(): ClaimForCall__Outputs {
    return new ClaimForCall__Outputs(this);
  }
}

export class ClaimForCall__Inputs {
  _call: ClaimForCall;

  constructor(call: ClaimForCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ClaimForCall__Outputs {
  _call: ClaimForCall;

  constructor(call: ClaimForCall) {
    this._call = call;
  }
}

export class PayCall extends ethereum.Call {
  get inputs(): PayCall__Inputs {
    return new PayCall__Inputs(this);
  }

  get outputs(): PayCall__Outputs {
    return new PayCall__Outputs(this);
  }
}

export class PayCall__Inputs {
  _call: PayCall;

  constructor(call: PayCall) {
    this._call = call;
  }
}

export class PayCall__Outputs {
  _call: PayCall;

  constructor(call: PayCall) {
    this._call = call;
  }
}

export class RecoverWrongTokensCall extends ethereum.Call {
  get inputs(): RecoverWrongTokensCall__Inputs {
    return new RecoverWrongTokensCall__Inputs(this);
  }

  get outputs(): RecoverWrongTokensCall__Outputs {
    return new RecoverWrongTokensCall__Outputs(this);
  }
}

export class RecoverWrongTokensCall__Inputs {
  _call: RecoverWrongTokensCall;

  constructor(call: RecoverWrongTokensCall) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RecoverWrongTokensCall__Outputs {
  _call: RecoverWrongTokensCall;

  constructor(call: RecoverWrongTokensCall) {
    this._call = call;
  }
}

export class RefundCall extends ethereum.Call {
  get inputs(): RefundCall__Inputs {
    return new RefundCall__Inputs(this);
  }

  get outputs(): RefundCall__Outputs {
    return new RefundCall__Outputs(this);
  }
}

export class RefundCall__Inputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }
}

export class RefundCall__Outputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }
}

export class RefundTokensCall extends ethereum.Call {
  get inputs(): RefundTokensCall__Inputs {
    return new RefundTokensCall__Inputs(this);
  }

  get outputs(): RefundTokensCall__Outputs {
    return new RefundTokensCall__Outputs(this);
  }
}

export class RefundTokensCall__Inputs {
  _call: RefundTokensCall;

  constructor(call: RefundTokensCall) {
    this._call = call;
  }
}

export class RefundTokensCall__Outputs {
  _call: RefundTokensCall;

  constructor(call: RefundTokensCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetMetadataURLCall extends ethereum.Call {
  get inputs(): SetMetadataURLCall__Inputs {
    return new SetMetadataURLCall__Inputs(this);
  }

  get outputs(): SetMetadataURLCall__Outputs {
    return new SetMetadataURLCall__Outputs(this);
  }
}

export class SetMetadataURLCall__Inputs {
  _call: SetMetadataURLCall;

  constructor(call: SetMetadataURLCall) {
    this._call = call;
  }

  get _metadataURL(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetMetadataURLCall__Outputs {
  _call: SetMetadataURLCall;

  constructor(call: SetMetadataURLCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawETHCall extends ethereum.Call {
  get inputs(): WithdrawETHCall__Inputs {
    return new WithdrawETHCall__Inputs(this);
  }

  get outputs(): WithdrawETHCall__Outputs {
    return new WithdrawETHCall__Outputs(this);
  }
}

export class WithdrawETHCall__Inputs {
  _call: WithdrawETHCall;

  constructor(call: WithdrawETHCall) {
    this._call = call;
  }
}

export class WithdrawETHCall__Outputs {
  _call: WithdrawETHCall;

  constructor(call: WithdrawETHCall) {
    this._call = call;
  }
}

export class WithdrawNotSoldTokensCall extends ethereum.Call {
  get inputs(): WithdrawNotSoldTokensCall__Inputs {
    return new WithdrawNotSoldTokensCall__Inputs(this);
  }

  get outputs(): WithdrawNotSoldTokensCall__Outputs {
    return new WithdrawNotSoldTokensCall__Outputs(this);
  }
}

export class WithdrawNotSoldTokensCall__Inputs {
  _call: WithdrawNotSoldTokensCall;

  constructor(call: WithdrawNotSoldTokensCall) {
    this._call = call;
  }
}

export class WithdrawNotSoldTokensCall__Outputs {
  _call: WithdrawNotSoldTokensCall;

  constructor(call: WithdrawNotSoldTokensCall) {
    this._call = call;
  }
}
